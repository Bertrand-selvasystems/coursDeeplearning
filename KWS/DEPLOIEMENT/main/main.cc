/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// DECLARATION DES BIBLIOTHEQUES
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#include <string.h>

#include "constantes.h"
#include "driver/rmt_tx.h"
#include "esp_log.h"
#include "esp_timer.h"  // Pour utiliser esp_timer_get_time()
#include "freertos/FreeRTOS.h"
#include "freertos/queue.h"
#include "freertos/task.h"
#include "led.h"
#include "micro.h"
#include "model.h"
#include "neurone.h"
#include "output_handler.h"
#include "tasks.h"
#include "variables.h"

extern "C" void app_main() {
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////// SETUP
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // Initialisation du réseau de neurones
  neurone_init();

  // Initialiser buffer_queue si elle est initialisée dans une fonction
  initialize_buffer_queue();
  initialize_spectrogram_queue();
  buffer_control_init();

  // Initialisation du micro et récupération des paramètres I2S
  micro_task_params_t *params = micro_init();  // necessaire pour passer les parametres issues de l'initialisation de micro_init à la fonction
  // micro_read_task(void *args)
  if (params == NULL) {
    ESP_LOGE("app_main", "Failed to initialize I2S");
    return;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////// TASKS
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  xTaskCreate(led_task, "led_task", 8192, NULL, 5, NULL);  // il faut modifier la task qui gere les leds pour récupérer les précédentes prédictions
  // Créer la tâche de lecture du micro avec les paramètres
  xTaskCreate(micro_read_task, "micro_read_task", 8192, params, 5, NULL);

  // il faut completer les tasks : rajouter la task qui calcul les spectrogrammes
  xTaskCreate(process_audio_task, "process_audio_task", 8192, NULL, 5, NULL);

  // il faut faire les inferences : rajouter la task qui fait les inferences
  xTaskCreate(process_neural_network_task, "process_neural_network_task", 8192, NULL, 5, NULL);

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////// LOOP
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  // // a terme il n'y aura plus rien dans le loop
  // while (1)
  // {
  //   neurone_inference(input_values, output_values);

  //   // Afficher ou traiter les résultats (ajusté pour utiliser seulement 2 arguments)
  //   HandleOutput(output_values[0], output_values[1], output_values[2]);
  //   vTaskDelay(pdMS_TO_TICKS(100)); // Délai de 100 ms
  // }
}
