#ifndef TASKS
#define TASKS
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// DEFINITION DES BIBLIOTHEQUES
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#include <stdlib.h>

#include <cstring>

#include "constantes.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/queue.h"
#include "freertos/semphr.h"  // Pour les sémaphores
#include "freertos/task.h"
#include "led.h"
#include "micro.h"
#include "traitement_signal.h"
#include "variables.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// DECLARATION DES VARIABLES GLOBALES
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
extern QueueHandle_t buffer_queue;  // Incorrect : Déclaration et initialisation
extern QueueHandle_t spectrogram_queue;

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// PROTOCOLE DES FONCTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
// Prototype de la tâche pour lire les données du microphone
void micro_read_task(void *args);
// Prototype de la tâche pour les LEDs
void led_task(void *pvParameter);
// Prototype de la tâche pour le calcul des spectrogrammes
void process_audio_task(void *pvParameter);
// Prototype de la tâche pour le calcul des inferences
void process_neural_network_task(void *pvParameter);
/* fonction pour la gestion du buffer semaphore */
void buffer_control_init();
void buffer_processed();
int is_at_least_4_buffers_processed();
// void reset_buffer_count();
void initialize_buffer_queue();
void initialize_spectrogram_queue();

#endif  // TENSORFLOW_LITE_MICRO_EXAMPLES_HELLO_WORLD_MODEL_H_
